"""
Pydantic models for chat functionality
"""

from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Literal
from datetime import datetime
from app.models.excel import ExcelData


class ExcelContext(BaseModel):
    """Context information about the current Excel state"""
    current_sheet: Optional[str] = None
    selected_range: Optional[str] = None
    data: Optional[ExcelData] = None
    workbook_name: Optional[str] = None


class ExcelAction(BaseModel):
    """Action that should be performed in Excel"""
    type: Literal["insert_formula", "create_chart", "format_cells", "insert_data", "select_range"]
    target: str = Field(..., description="Target range or location")
    payload: Dict[str, Any] = Field(..., description="Action-specific data")
    description: str = Field(..., description="Human-readable description of the action")


class ChatMessage(BaseModel):
    """Individual chat message"""
    id: str
    content: str
    role: Literal["user", "assistant"]
    timestamp: datetime
    actions: Optional[List[ExcelAction]] = None
    metadata: Optional[Dict[str, Any]] = None


class ChatRequest(BaseModel):
    """Request for chat endpoint"""
    message: str = Field(..., description="User's message")
    context: Optional[ExcelContext] = None
    session_id: Optional[str] = None


class ChatResponse(BaseModel):
    """Response from chat endpoint"""
    response: str = Field(..., description="AI assistant's response")
    actions: Optional[List[ExcelAction]] = None
    session_id: str
    suggestions: Optional[List[str]] = None


class Insight(BaseModel):
    """Data insight generated by AI"""
    title: str
    description: str
    confidence: float = Field(..., ge=0.0, le=1.0)
    category: Literal["trend", "pattern", "anomaly", "correlation", "summary"]
    data_points: Optional[List[str]] = None


class Suggestion(BaseModel):
    """AI suggestion for user action"""
    title: str
    description: str
    action_type: Literal["formula", "chart", "analysis", "formatting", "data_cleaning"]
    priority: Literal["high", "medium", "low"]
    estimated_benefit: str


class Visualization(BaseModel):
    """Visualization recommendation"""
    chart_type: str
    title: str
    data_range: str
    description: str
    config: Dict[str, Any]


class AnalysisRequest(BaseModel):
    """Request for data analysis"""
    data: ExcelData
    query: Optional[str] = None
    analysis_type: Optional[Literal["exploratory", "statistical", "predictive", "comparative"]] = None


class AnalysisResponse(BaseModel):
    """Response from data analysis"""
    insights: List[Insight]
    suggestions: List[Suggestion]
    visualizations: Optional[List[Visualization]] = None
    summary: str


class LangGraphChatResponse(BaseModel):
    """Response from LangGraph chat processing"""
    content: str
    actions: Optional[List[ExcelAction]] = None
    session_id: str
    reasoning: Optional[str] = None 